// 체육복 - 프로그래머스 lv1
// https://programmers.co.kr/learn/courses/30/lessons/42862

// 제한시간 30분

// 문제 설명
// 점심시간에 도둑이 들어, 일부 학생이 체육복을 도난당했습니다.
// 다행히 여벌 체육복이 있는 학생이 이들에게 체육복을 빌려주려 합니다.
// 학생들의 번호는 체격 순으로 매겨져 있어, 바로 앞번호의 학생이나 바로 뒷번호의 학생에게만 체육복을 빌려줄 수 있습니다.
// 예를 들어, 4번 학생은 3번 학생이나 5번 학생에게만 체육복을 빌려줄 수 있습니다.
// 체육복이 없으면 수업을 들을 수 없기 때문에 체육복을 적절히 빌려 최대한 많은 학생이 체육수업을 들어야 합니다.
// 전체 학생의 수 n, 체육복을 도난당한 학생들의 번호가 담긴 배열 lost, 여벌의 체육복을 가져온 학생들의 번호가 담긴 배열 reserve가 매개변수로 주어질 때, 체육수업을 들을 수 있는 학생의 최댓값을 return 하도록 solution 함수를 작성해주세요.

// 제한 사항
// 전체 학생의 수는 2명 이상 30명 이하입니다.
// 체육복을 도난당한 학생의 수는 1명 이상 n명 이하이고 중복되는 번호는 없습니다.
// 여벌의 체육복을 가져온 학생의 수는 1명 이상 n명 이하이고 중복되는 번호는 없습니다.
// 여벌 체육복이 있는 학생만 다른 학생에게 체육복을 빌려줄 수 있습니다.
// 여벌 체육복을 가져온 학생이 체육복을 도난당했을 수 있습니다. 이때 이 학생은 체육복을 하나만 도난당했다고 가정하며, 남은 체육복이 하나이기에 다른 학생에게는 체육복을 빌려줄 수 없습니다.

// 문제 해석
// lost 에 있는 숫자가 reserve에 있는 숫자들과 비교해서 -1 or +1 이면 pass, 아닐 경우 n-- 하는 방법?

// 수도코드 작성
// 1. lost의 길이만큼 반복
// 2. reserve의 길이만큼 반복해서 -1 or +1 인지 비교해서 아닐 경우 n--
// 3. 리턴

function solution(n, lost, reserve) {
  //   var answer = 0;
  //   return answer;
  let answer = n;
  let chance = reserve.length;
  for (let i = 0; i < lost.length; i++) {
    for (let j = 0; j < reserve.length; j++) {
      if (lost[i] !== reserve[j] - 1 || lost[i] !== reserve[j] + 1) {
        answer--;
        chance--;
      }
      if (chance === 0) {
        return answer;
      }
    }
  }
  //   return answer;
}

// 후기
// 모든 조건을 만족하지 못했다
// 다시 처음부터 봤을 때
// 불필요한 경우에도 - 처리가 되어서 원하는 값을 얻을 수가 없었다
// 중간 중간 콘솔을 찍어가면서 진행했다면 어땠을까? 하는 아쉬움이 있다

// solution

function solution(n, lost, reserve) {
  return (
    n -
    lost.filter((a) => {
      const b = reserve.find((r) => Math.abs(r - a) <= 1);
      if (!b) return true;
      reserve = reserve.filter((r) => r !== b);
    }).length
  );
}

// 다른 사람들의 풀이를 둘러보다가
// 아주 짧고 명쾌한 풀이가 있었다...
// 이러한 알고리즘 문제를 풀 때 나는 filter 를 거의 사용하지 않는다... 부럽다
// 근데 이해하기가 더 어려운 것 같다!

// 실제 코딩 테스트를 본다면 위와 같이 짧은 풀이보다도
// 풀이가 길더라도 내가 설명할 수 있는 코드를 짜야겠다는 생각을 했다
