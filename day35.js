// 튜플 - 프로그래머스
// https://programmers.co.kr/learn/courses/30/lessons/64065

// 문제 설명
// 셀수있는 수량의 순서있는 열거 또는 어떤 순서를 따르는 요소들의 모음을 튜플(tuple)이라고 합니다. n개의 요소를 가진 튜플을 n-튜플(n-tuple)이라고 하며, 다음과 같이 표현할 수 있습니다.

// (a1, a2, a3, ..., an)
// 튜플은 다음과 같은 성질을 가지고 있습니다.

// 중복된 원소가 있을 수 있습니다. ex : (2, 3, 1, 2)
// 원소에 정해진 순서가 있으며, 원소의 순서가 다르면 서로 다른 튜플입니다. ex : (1, 2, 3) ≠ (1, 3, 2)
// 튜플의 원소 개수는 유한합니다.
// 원소의 개수가 n개이고, 중복되는 원소가 없는 튜플 (a1, a2, a3, ..., an)이 주어질 때(단, a1, a2, ..., an은 자연수), 이는 다음과 같이 집합 기호 '{', '}'를 이용해 표현할 수 있습니다.

// {{a1}, {a1, a2}, {a1, a2, a3}, {a1, a2, a3, a4}, ... {a1, a2, a3, a4, ..., an}}
// 예를 들어 튜플이 (2, 1, 3, 4)인 경우 이는

// {{2}, {2, 1}, {2, 1, 3}, {2, 1, 3, 4}}
// 와 같이 표현할 수 있습니다. 이때, 집합은 원소의 순서가 바뀌어도 상관없으므로

// {{2}, {2, 1}, {2, 1, 3}, {2, 1, 3, 4}}
// {{2, 1, 3, 4}, {2}, {2, 1, 3}, {2, 1}}
// {{1, 2, 3}, {2, 1}, {1, 2, 4, 3}, {2}}
// 는 모두 같은 튜플 (2, 1, 3, 4)를 나타냅니다.

// 특정 튜플을 표현하는 집합이 담긴 문자열 s가 매개변수로 주어질 때, s가 표현하는 튜플을 배열에 담아 return 하도록 solution 함수를 완성해주세요.

// [제한사항]
// s의 길이는 5 이상 1,000,000 이하입니다.
// s는 숫자와 '{', '}', ',' 로만 이루어져 있습니다.
// 숫자가 0으로 시작하는 경우는 없습니다.
// s는 항상 중복되는 원소가 없는 튜플을 올바르게 표현하고 있습니다.
// s가 표현하는 튜플의 원소는 1 이상 100,000 이하인 자연수입니다.
// return 하는 배열의 길이가 1 이상 500 이하인 경우만 입력으로 주어집니다.

// 입출력 예
// "{{2},{2,1},{2,1,3},{2,1,3,4}}"	[2, 1, 3, 4]
// "{{1,2,3},{2,1},{1,2,4,3},{2}}"	[2, 1, 3, 4]
// "{{20,111},{111}}"	[111, 20]
// "{{123}}"	[123]
// "{{4,2,3},{3},{2,3,4,1},{2,3}}"	[3, 2, 4, 1]

// 분석
// 문자열 인풋 숫자배열 아웃풋
// 1. 문자열을 다룰수 있도록 배열로 바꿔야겠다
// 2. 입출력 예 2번째를 봤을 때 원소의 갯수 순으로 sort를 한 후
// 3. 첫번째를 기준으로 같으면 넘어가고 다르면 푸쉬하는 식으로

function solution(s) {
  var answer = [];
  // 1. 배열로 바꾸기
  let leng = s.length;
  let change1 = s.slice(2, leng - 2);
  // console.log(change1)
  let change2 = change1.split("},{");
  // console.log(change2)
  // [ '2', '2,1', '2,1,3', '2,1,3,4' ]

  // 2. 정렬
  change2.sort((a, b) => a.length - b.length);
  //   console.log(change2);
  // [ '2', '2,1', '2,1,3', '2,1,3,4' ]
  // ! 문자열인데...비교가 되려나?

  // 3. 선형적인 비교, 푸쉬
  for (let i = 0; i < change2.length; i++) {
    // 3-1. 일단 반복이 가능하게 문자를 배열로
    let target = change2[i].split(",");
    // console.log(target);

    // 3-2. target의 길이만큼 answer와 비교
    for (let j = 0; j < target.length; j++) {
      if (!answer.includes(target[j])) {
        answer.push(target[j]);
      }
    }
  }
  // [ '2', '1', '3', '4' ]

  let answer2 = [];
  for (let i in answer) {
    answer2.push(answer[i] * 1);
  }
  return answer2;
}

// 후기
// 비교, 탐색을 어떻게 할 것인가보다
// 문자열을 어떻게 다룰 것인가? 가 중요해보인다
// 정말 보이는 그대로 문자열을 다뤘는데
// 더 좋은 방법이 있다면 익혀두고 사용하는게 좋겠다

// solution 1

function solution(s) {
  return JSON.parse(s.replace(/{/g, "[").replace(/}/g, "]"))
    .sort((a, b) => a.length - b.length)
    .reduce((arr, v, n) => {
      if (n) {
        return arr.concat(v.filter((f) => !arr.includes(f)));
      }
      return v;
    }, []);
}
